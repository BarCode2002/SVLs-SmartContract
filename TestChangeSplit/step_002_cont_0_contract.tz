parameter (or (or (or (address %changeAdmin1) (or (address %changeAdmin2) (mutez %changeMinTransferPrice))) (or (or (mutez %changeMintPrice) (mutez %changeRequestFee)) (or (nat %changeSplit) (pair %changeTransferPrice (mutez %price) (string %svl_key))))) (or (or (pair %mint (list %curr_owner_info string) (string %svl_key)) (or (string %ownerAcceptTransferRequest) (string %ownerClearTransferRequest))) (or (or (string %requestTransfer) (string %requesterClearTransferRequest)) (or (string %transfer) (pair %update (list %curr_owner_info string) (string %svl_key))))));
storage   (pair (address %admin1) (pair (address %admin2) (pair (mutez %minTransferPrice) (pair (mutez %mintPrice) (pair (mutez %requestFee) (pair (nat %split) (big_map %svls string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))))))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == changeAdmin1 ==
                # assert sp.sender == self.data.admin1, "0" # @parameter%changeAdmin1 : @storage
                DUP 2;      # @storage : @parameter%changeAdmin1 : @storage
                CAR;        # address : @parameter%changeAdmin1 : @storage
                SENDER;     # @sender : address : @parameter%changeAdmin1 : @storage
                COMPARE;    # int : @parameter%changeAdmin1 : @storage
                EQ;         # bool : @parameter%changeAdmin1 : @storage
                IF
                  {}
                  {
                    PUSH string "0"; # string : @parameter%changeAdmin1 : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%changeAdmin1 : @storage
                # self.data.admin1 = newAdmin # @parameter%changeAdmin1 : @storage
                UPDATE 1;   # @storage
              }
              {
                IF_LEFT
                  {
                    # == changeAdmin2 ==
                    # assert sp.sender == self.data.admin2, "0" # @parameter%changeAdmin2 : @storage
                    DUP 2;      # @storage : @parameter%changeAdmin2 : @storage
                    GET 3;      # address : @parameter%changeAdmin2 : @storage
                    SENDER;     # @sender : address : @parameter%changeAdmin2 : @storage
                    COMPARE;    # int : @parameter%changeAdmin2 : @storage
                    EQ;         # bool : @parameter%changeAdmin2 : @storage
                    IF
                      {}
                      {
                        PUSH string "0"; # string : @parameter%changeAdmin2 : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%changeAdmin2 : @storage
                    # self.data.admin2 = newAdmin # @parameter%changeAdmin2 : @storage
                    UPDATE 3;   # @storage
                  }
                  {
                    # == changeMinTransferPrice ==
                    # assert sp.sender == self.data.admin1 or sp.sender == self.data.admin2, "0" # @parameter%changeMinTransferPrice : @storage
                    DUP 2;      # @storage : @parameter%changeMinTransferPrice : @storage
                    CAR;        # address : @parameter%changeMinTransferPrice : @storage
                    SENDER;     # @sender : address : @parameter%changeMinTransferPrice : @storage
                    COMPARE;    # int : @parameter%changeMinTransferPrice : @storage
                    EQ;         # bool : @parameter%changeMinTransferPrice : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%changeMinTransferPrice : @storage
                      }
                      {
                        DUP 2;      # @storage : @parameter%changeMinTransferPrice : @storage
                        GET 3;      # address : @parameter%changeMinTransferPrice : @storage
                        SENDER;     # @sender : address : @parameter%changeMinTransferPrice : @storage
                        COMPARE;    # int : @parameter%changeMinTransferPrice : @storage
                        EQ;         # bool : @parameter%changeMinTransferPrice : @storage
                      }; # bool : @parameter%changeMinTransferPrice : @storage
                    IF
                      {}
                      {
                        PUSH string "0"; # string : @parameter%changeMinTransferPrice : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%changeMinTransferPrice : @storage
                    # self.data.minTransferPrice = newMinTransferPrice # @parameter%changeMinTransferPrice : @storage
                    UPDATE 5;   # @storage
                  }; # @storage
              }; # @storage
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == changeMintPrice ==
                    # assert sp.sender == self.data.admin1 or sp.sender == self.data.admin2, "0" # @parameter%changeMintPrice : @storage
                    DUP 2;      # @storage : @parameter%changeMintPrice : @storage
                    CAR;        # address : @parameter%changeMintPrice : @storage
                    SENDER;     # @sender : address : @parameter%changeMintPrice : @storage
                    COMPARE;    # int : @parameter%changeMintPrice : @storage
                    EQ;         # bool : @parameter%changeMintPrice : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%changeMintPrice : @storage
                      }
                      {
                        DUP 2;      # @storage : @parameter%changeMintPrice : @storage
                        GET 3;      # address : @parameter%changeMintPrice : @storage
                        SENDER;     # @sender : address : @parameter%changeMintPrice : @storage
                        COMPARE;    # int : @parameter%changeMintPrice : @storage
                        EQ;         # bool : @parameter%changeMintPrice : @storage
                      }; # bool : @parameter%changeMintPrice : @storage
                    IF
                      {}
                      {
                        PUSH string "0"; # string : @parameter%changeMintPrice : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%changeMintPrice : @storage
                    # self.data.mintPrice = newMintPrice # @parameter%changeMintPrice : @storage
                    UPDATE 7;   # @storage
                  }
                  {
                    # == changeRequestFee ==
                    # assert sp.sender == self.data.admin1 or sp.sender == self.data.admin2, "0" # @parameter%changeRequestFee : @storage
                    DUP 2;      # @storage : @parameter%changeRequestFee : @storage
                    CAR;        # address : @parameter%changeRequestFee : @storage
                    SENDER;     # @sender : address : @parameter%changeRequestFee : @storage
                    COMPARE;    # int : @parameter%changeRequestFee : @storage
                    EQ;         # bool : @parameter%changeRequestFee : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%changeRequestFee : @storage
                      }
                      {
                        DUP 2;      # @storage : @parameter%changeRequestFee : @storage
                        GET 3;      # address : @parameter%changeRequestFee : @storage
                        SENDER;     # @sender : address : @parameter%changeRequestFee : @storage
                        COMPARE;    # int : @parameter%changeRequestFee : @storage
                        EQ;         # bool : @parameter%changeRequestFee : @storage
                      }; # bool : @parameter%changeRequestFee : @storage
                    IF
                      {}
                      {
                        PUSH string "0"; # string : @parameter%changeRequestFee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%changeRequestFee : @storage
                    # self.data.requestFee = newRequestFee # @parameter%changeRequestFee : @storage
                    UPDATE 9;   # @storage
                  }; # @storage
              }
              {
                IF_LEFT
                  {
                    # == changeSplit ==
                    # assert sp.sender == self.data.admin1 or sp.sender == self.data.admin2, "0" # @parameter%changeSplit : @storage
                    DUP 2;      # @storage : @parameter%changeSplit : @storage
                    CAR;        # address : @parameter%changeSplit : @storage
                    SENDER;     # @sender : address : @parameter%changeSplit : @storage
                    COMPARE;    # int : @parameter%changeSplit : @storage
                    EQ;         # bool : @parameter%changeSplit : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%changeSplit : @storage
                      }
                      {
                        DUP 2;      # @storage : @parameter%changeSplit : @storage
                        GET 3;      # address : @parameter%changeSplit : @storage
                        SENDER;     # @sender : address : @parameter%changeSplit : @storage
                        COMPARE;    # int : @parameter%changeSplit : @storage
                        EQ;         # bool : @parameter%changeSplit : @storage
                      }; # bool : @parameter%changeSplit : @storage
                    IF
                      {}
                      {
                        PUSH string "0"; # string : @parameter%changeSplit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%changeSplit : @storage
                    # self.data.split = newSplit # @parameter%changeSplit : @storage
                    UPDATE 11;  # @storage
                  }
                  {
                    # == changeTransferPrice ==
                    # svl = self.data.svls[params.svl_key] # @parameter%changeTransferPrice : @storage
                    DUP 2;      # @storage : @parameter%changeTransferPrice : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%changeTransferPrice : @storage
                    DUP 2;      # @parameter%changeTransferPrice : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%changeTransferPrice : @storage
                    CDR;        # string : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%changeTransferPrice : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%changeTransferPrice : @storage
                    IF_NONE
                      {
                        PUSH int 97; # int : @parameter%changeTransferPrice : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%changeTransferPrice : @storage
                    # assert sp.sender == svl.owner, "3" # @some : @parameter%changeTransferPrice : @storage
                    DUP;        # @some : @some : @parameter%changeTransferPrice : @storage
                    GET 7;      # address : @some : @parameter%changeTransferPrice : @storage
                    SENDER;     # @sender : address : @some : @parameter%changeTransferPrice : @storage
                    COMPARE;    # int : @some : @parameter%changeTransferPrice : @storage
                    EQ;         # bool : @some : @parameter%changeTransferPrice : @storage
                    IF
                      {}
                      {
                        PUSH string "3"; # string : @some : @parameter%changeTransferPrice : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%changeTransferPrice : @storage
                    # assert params.price >= self.data.minTransferPrice, "1" # @some : @parameter%changeTransferPrice : @storage
                    DUP 3;      # @storage : @some : @parameter%changeTransferPrice : @storage
                    GET 5;      # mutez : @some : @parameter%changeTransferPrice : @storage
                    DUP 3;      # @parameter%changeTransferPrice : mutez : @some : @parameter%changeTransferPrice : @storage
                    CAR;        # mutez : mutez : @some : @parameter%changeTransferPrice : @storage
                    COMPARE;    # int : @some : @parameter%changeTransferPrice : @storage
                    GE;         # bool : @some : @parameter%changeTransferPrice : @storage
                    IF
                      {}
                      {
                        PUSH string "1"; # string : @some : @parameter%changeTransferPrice : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%changeTransferPrice : @storage
                    # svl.price = params.price # @some : @parameter%changeTransferPrice : @storage
                    DUP 2;      # @parameter%changeTransferPrice : @some : @parameter%changeTransferPrice : @storage
                    CAR;        # mutez : @some : @parameter%changeTransferPrice : @storage
                    UPDATE 11;  # @some : @parameter%changeTransferPrice : @storage
                    # self.data.svls[params.svl_key] = svl # @some : @parameter%changeTransferPrice : @storage
                    DIG 2;      # @storage : @some : @parameter%changeTransferPrice
                    DUP;        # @storage : @storage : @some : @parameter%changeTransferPrice
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @some : @parameter%changeTransferPrice
                    DIG 2;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%changeTransferPrice
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%changeTransferPrice
                    DIG 3;      # @parameter%changeTransferPrice : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    CDR;        # string : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE 12;  # @storage
                  }; # @storage
              }; # @storage
          }; # @storage
        NIL operation; # list operation : @storage
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == mint ==
                # value_option = self.data.svls.get_opt(params.svl_key) # @parameter%mint : @storage
                DUP 2;      # @storage : @parameter%mint : @storage
                GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 2;      # @parameter%mint : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                CDR;        # string : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                # assert value_option.is_none(), "10" # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                IF_NONE
                  {}
                  {
                    PUSH string "10"; # string : @some : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                # assert sp.amount == self.data.mintPrice, "1" # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 3;      # @storage : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                GET 7;      # mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                AMOUNT;     # @amount : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                COMPARE;    # int : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                EQ;         # bool : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                IF
                  {}
                  {
                    PUSH string "1"; # string : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                # assert len(params.curr_owner_info) < 100, "2" # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PUSH nat 100; # nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 3;      # @parameter%mint : nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                CAR;        # list string : nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                SIZE;       # nat : nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                COMPARE;    # int : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                LT;         # bool : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                IF
                  {}
                  {
                    PUSH string "2"; # string : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                # if self.data.mintPrice != sp.mutez(0): # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PUSH mutez 0; # mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 4;      # @storage : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                GET 7;      # mutez : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                COMPARE;    # int : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                NEQ;        # bool : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                IF
                  {
                    # share = sp.split_tokens(sp.amount, 50, 100) # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    PUSH nat 100; # nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    PUSH nat 50; # nat : nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    AMOUNT;     # @amount : nat : nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    MUL;        # mutez : nat : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    EDIV;       # option (pair mutez mutez) : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    IF_NONE
                      {
                        PUSH int 153; # int : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        # share = sp.split_tokens(sp.amount, 50, 100) # @some : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                      }; # @some : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    CAR;        # mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    # sp.send(self.data.admin1, share) # mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    NIL operation; # list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    DUP 5;      # @storage : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    CAR;        # address : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    CONTRACT unit; # option (contract unit) : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    IF_NONE
                      {
                        PUSH int 154; # int : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    DUP 3;      # mutez : @some : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    UNIT;       # unit : mutez : @some : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    TRANSFER_TOKENS; # operation : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    CONS;       # list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    # sp.send(self.data.admin2, share) # list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    DUP 5;      # @storage : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    GET 3;      # address : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    CONTRACT unit; # option (contract unit) : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    IF_NONE
                      {
                        PUSH int 155; # int : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : mutez : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    DIG 2;      # mutez : @some : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    UNIT;       # unit : mutez : @some : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    TRANSFER_TOKENS; # operation : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                    CONS;       # list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                  }
                  {
                    NIL operation; # list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                  }; # list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                # self.data.svls[params.svl_key] = sp.record( # list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 4;      # @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP;        # @storage : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                SENDER;     # @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 7;      # @storage : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                GET 5;      # mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                NIL (pair timestamp (pair address (list string))); # list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PUSH (list string) {""}; # list string : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                SENDER;     # @sender : list string : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PAIR;       # pair @sender (list string) : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                NOW;        # @now : pair @sender (list string) : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PAIR;       # pair @now (pair @sender (list string)) : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                CONS;       # list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                SENDER;     # @sender : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PUSH bool True; # bool : @sender : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DUP 10;     # @parameter%mint : bool : @sender : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                CAR;        # list string : bool : @sender : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PUSH bool False; # bool : list string : bool : @sender : list (pair timestamp (pair address (list string))) : mutez : @sender : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                PAIR 7;     # pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%mint : @storage
                DIG 4;      # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%mint : @storage
                DROP;       # pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%mint : @storage
                DIG 5;      # @storage : pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%mint
                DROP;       # pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%mint
                SOME;       # option (pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender)))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%mint
                DIG 4;      # @parameter%mint : option (pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender)))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation
                CDR;        # string : option (pair bool (pair (list string) (pair bool (pair @sender (pair (list (pair timestamp (pair address (list string)))) (pair mutez @sender)))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation
                UPDATE;     # big_map string (pair bool (pair (list string) (pair bool (pair address (pair (list (pair timestamp (pair address (list string)))) (pair mutez address)))))) : @storage : list operation
                UPDATE 12;  # @storage : list operation
                SWAP;       # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == ownerAcceptTransferRequest ==
                    # svl = self.data.svls[svl_key] # @parameter%ownerAcceptTransferRequest : @storage
                    DUP 2;      # @storage : @parameter%ownerAcceptTransferRequest : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%ownerAcceptTransferRequest : @storage
                    DUP 2;      # @parameter%ownerAcceptTransferRequest : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%ownerAcceptTransferRequest : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%ownerAcceptTransferRequest : @storage
                    IF_NONE
                      {
                        PUSH int 78; # int : @parameter%ownerAcceptTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%ownerAcceptTransferRequest : @storage
                    # assert svl.owner == sp.sender, "3" # @some : @parameter%ownerAcceptTransferRequest : @storage
                    SENDER;     # @sender : @some : @parameter%ownerAcceptTransferRequest : @storage
                    DUP 2;      # @some : @sender : @some : @parameter%ownerAcceptTransferRequest : @storage
                    GET 7;      # address : @sender : @some : @parameter%ownerAcceptTransferRequest : @storage
                    COMPARE;    # int : @some : @parameter%ownerAcceptTransferRequest : @storage
                    EQ;         # bool : @some : @parameter%ownerAcceptTransferRequest : @storage
                    IF
                      {}
                      {
                        PUSH string "3"; # string : @some : @parameter%ownerAcceptTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%ownerAcceptTransferRequest : @storage
                    # assert svl.request != svl.owner, "7" # @some : @parameter%ownerAcceptTransferRequest : @storage
                    DUP;        # @some : @some : @parameter%ownerAcceptTransferRequest : @storage
                    GET 7;      # address : @some : @parameter%ownerAcceptTransferRequest : @storage
                    DUP 2;      # @some : address : @some : @parameter%ownerAcceptTransferRequest : @storage
                    GET 12;     # address : address : @some : @parameter%ownerAcceptTransferRequest : @storage
                    COMPARE;    # int : @some : @parameter%ownerAcceptTransferRequest : @storage
                    NEQ;        # bool : @some : @parameter%ownerAcceptTransferRequest : @storage
                    IF
                      {}
                      {
                        PUSH string "7"; # string : @some : @parameter%ownerAcceptTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%ownerAcceptTransferRequest : @storage
                    # svl.acceptRequest = True # @some : @parameter%ownerAcceptTransferRequest : @storage
                    PUSH bool True; # bool : @some : @parameter%ownerAcceptTransferRequest : @storage
                    UPDATE 1;   # @some : @parameter%ownerAcceptTransferRequest : @storage
                    # self.data.svls[svl_key] = svl # @some : @parameter%ownerAcceptTransferRequest : @storage
                    DIG 2;      # @storage : @some : @parameter%ownerAcceptTransferRequest
                    DUP;        # @storage : @storage : @some : @parameter%ownerAcceptTransferRequest
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @some : @parameter%ownerAcceptTransferRequest
                    DIG 2;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%ownerAcceptTransferRequest
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%ownerAcceptTransferRequest
                    DIG 3;      # @parameter%ownerAcceptTransferRequest : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE 12;  # @storage
                  }
                  {
                    # == ownerClearTransferRequest ==
                    # svl = self.data.svls[svl_key] # @parameter%ownerClearTransferRequest : @storage
                    DUP 2;      # @storage : @parameter%ownerClearTransferRequest : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%ownerClearTransferRequest : @storage
                    DUP 2;      # @parameter%ownerClearTransferRequest : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%ownerClearTransferRequest : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%ownerClearTransferRequest : @storage
                    IF_NONE
                      {
                        PUSH int 69; # int : @parameter%ownerClearTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%ownerClearTransferRequest : @storage
                    # assert svl.owner == sp.sender, "3" # @some : @parameter%ownerClearTransferRequest : @storage
                    SENDER;     # @sender : @some : @parameter%ownerClearTransferRequest : @storage
                    DUP 2;      # @some : @sender : @some : @parameter%ownerClearTransferRequest : @storage
                    GET 7;      # address : @sender : @some : @parameter%ownerClearTransferRequest : @storage
                    COMPARE;    # int : @some : @parameter%ownerClearTransferRequest : @storage
                    EQ;         # bool : @some : @parameter%ownerClearTransferRequest : @storage
                    IF
                      {}
                      {
                        PUSH string "3"; # string : @some : @parameter%ownerClearTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%ownerClearTransferRequest : @storage
                    # svl.request = svl.owner # @some : @parameter%ownerClearTransferRequest : @storage
                    DUP;        # @some : @some : @parameter%ownerClearTransferRequest : @storage
                    GET 7;      # address : @some : @parameter%ownerClearTransferRequest : @storage
                    UPDATE 12;  # @some : @parameter%ownerClearTransferRequest : @storage
                    # svl.acceptRequest = False # @some : @parameter%ownerClearTransferRequest : @storage
                    PUSH bool False; # bool : @some : @parameter%ownerClearTransferRequest : @storage
                    UPDATE 1;   # @some : @parameter%ownerClearTransferRequest : @storage
                    # self.data.svls[svl_key] = svl # @some : @parameter%ownerClearTransferRequest : @storage
                    DIG 2;      # @storage : @some : @parameter%ownerClearTransferRequest
                    DUP;        # @storage : @storage : @some : @parameter%ownerClearTransferRequest
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @some : @parameter%ownerClearTransferRequest
                    DIG 2;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%ownerClearTransferRequest
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%ownerClearTransferRequest
                    DIG 3;      # @parameter%ownerClearTransferRequest : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE 12;  # @storage
                  }; # @storage
                NIL operation; # list operation : @storage
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == requestTransfer ==
                    # svl = self.data.svls[svl_key] # @parameter%requestTransfer : @storage
                    DUP 2;      # @storage : @parameter%requestTransfer : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%requestTransfer : @storage
                    DUP 2;      # @parameter%requestTransfer : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%requestTransfer : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%requestTransfer : @storage
                    IF_NONE
                      {
                        PUSH int 55; # int : @parameter%requestTransfer : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%requestTransfer : @storage
                    # assert sp.amount == self.data.requestFee, "1" # @some : @parameter%requestTransfer : @storage
                    DUP 3;      # @storage : @some : @parameter%requestTransfer : @storage
                    GET 9;      # mutez : @some : @parameter%requestTransfer : @storage
                    AMOUNT;     # @amount : mutez : @some : @parameter%requestTransfer : @storage
                    COMPARE;    # int : @some : @parameter%requestTransfer : @storage
                    EQ;         # bool : @some : @parameter%requestTransfer : @storage
                    IF
                      {}
                      {
                        PUSH string "1"; # string : @some : @parameter%requestTransfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%requestTransfer : @storage
                    # assert sp.sender != svl.owner, "5" # @some : @parameter%requestTransfer : @storage
                    DUP;        # @some : @some : @parameter%requestTransfer : @storage
                    GET 7;      # address : @some : @parameter%requestTransfer : @storage
                    SENDER;     # @sender : address : @some : @parameter%requestTransfer : @storage
                    COMPARE;    # int : @some : @parameter%requestTransfer : @storage
                    NEQ;        # bool : @some : @parameter%requestTransfer : @storage
                    IF
                      {}
                      {
                        PUSH string "5"; # string : @some : @parameter%requestTransfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%requestTransfer : @storage
                    # assert svl.request == svl.owner, "6" # @some : @parameter%requestTransfer : @storage
                    DUP;        # @some : @some : @parameter%requestTransfer : @storage
                    GET 7;      # address : @some : @parameter%requestTransfer : @storage
                    DUP 2;      # @some : address : @some : @parameter%requestTransfer : @storage
                    GET 12;     # address : address : @some : @parameter%requestTransfer : @storage
                    COMPARE;    # int : @some : @parameter%requestTransfer : @storage
                    EQ;         # bool : @some : @parameter%requestTransfer : @storage
                    IF
                      {}
                      {
                        PUSH string "6"; # string : @some : @parameter%requestTransfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%requestTransfer : @storage
                    # if self.data.requestFee != sp.mutez(0): # @some : @parameter%requestTransfer : @storage
                    PUSH mutez 0; # mutez : @some : @parameter%requestTransfer : @storage
                    DUP 4;      # @storage : mutez : @some : @parameter%requestTransfer : @storage
                    GET 9;      # mutez : mutez : @some : @parameter%requestTransfer : @storage
                    COMPARE;    # int : @some : @parameter%requestTransfer : @storage
                    NEQ;        # bool : @some : @parameter%requestTransfer : @storage
                    IF
                      {
                        # share = sp.split_tokens(sp.amount, 50, 100) # @some : @parameter%requestTransfer : @storage
                        PUSH nat 100; # nat : @some : @parameter%requestTransfer : @storage
                        PUSH nat 50; # nat : nat : @some : @parameter%requestTransfer : @storage
                        AMOUNT;     # @amount : nat : nat : @some : @parameter%requestTransfer : @storage
                        MUL;        # mutez : nat : @some : @parameter%requestTransfer : @storage
                        EDIV;       # option (pair mutez mutez) : @some : @parameter%requestTransfer : @storage
                        IF_NONE
                          {
                            PUSH int 60; # int : @some : @parameter%requestTransfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            # share = sp.split_tokens(sp.amount, 50, 100) # @some : @some : @parameter%requestTransfer : @storage
                          }; # @some : @some : @parameter%requestTransfer : @storage
                        CAR;        # mutez : @some : @parameter%requestTransfer : @storage
                        # sp.send(self.data.admin1, share) # mutez : @some : @parameter%requestTransfer : @storage
                        NIL operation; # list operation : mutez : @some : @parameter%requestTransfer : @storage
                        DUP 5;      # @storage : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        CAR;        # address : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        CONTRACT unit; # option (contract unit) : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        IF_NONE
                          {
                            PUSH int 61; # int : list operation : mutez : @some : @parameter%requestTransfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        DUP 3;      # mutez : @some : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        UNIT;       # unit : mutez : @some : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        TRANSFER_TOKENS; # operation : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        CONS;       # list operation : mutez : @some : @parameter%requestTransfer : @storage
                        # sp.send(self.data.admin2, share) # list operation : mutez : @some : @parameter%requestTransfer : @storage
                        DUP 5;      # @storage : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        GET 3;      # address : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        CONTRACT unit; # option (contract unit) : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        IF_NONE
                          {
                            PUSH int 62; # int : list operation : mutez : @some : @parameter%requestTransfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : mutez : @some : @parameter%requestTransfer : @storage
                        DIG 2;      # mutez : @some : list operation : @some : @parameter%requestTransfer : @storage
                        UNIT;       # unit : mutez : @some : list operation : @some : @parameter%requestTransfer : @storage
                        TRANSFER_TOKENS; # operation : list operation : @some : @parameter%requestTransfer : @storage
                        CONS;       # list operation : @some : @parameter%requestTransfer : @storage
                      }
                      {
                        NIL operation; # list operation : @some : @parameter%requestTransfer : @storage
                      }; # list operation : @some : @parameter%requestTransfer : @storage
                    SWAP;       # @some : list operation : @parameter%requestTransfer : @storage
                    # svl.request = sp.sender # @some : list operation : @parameter%requestTransfer : @storage
                    SENDER;     # @sender : @some : list operation : @parameter%requestTransfer : @storage
                    UPDATE 12;  # @some : list operation : @parameter%requestTransfer : @storage
                    SWAP;       # list operation : @some : @parameter%requestTransfer : @storage
                    # self.data.svls[svl_key] = svl # list operation : @some : @parameter%requestTransfer : @storage
                    DIG 3;      # @storage : list operation : @some : @parameter%requestTransfer
                    DUP;        # @storage : @storage : list operation : @some : @parameter%requestTransfer
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @some : @parameter%requestTransfer
                    DIG 3;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%requestTransfer
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%requestTransfer
                    DIG 4;      # @parameter%requestTransfer : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation
                    UPDATE 12;  # @storage : list operation
                    SWAP;       # list operation : @storage
                  }
                  {
                    # == requesterClearTransferRequest ==
                    # svl = self.data.svls[svl_key] # @parameter%requesterClearTransferRequest : @storage
                    DUP 2;      # @storage : @parameter%requesterClearTransferRequest : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%requesterClearTransferRequest : @storage
                    DUP 2;      # @parameter%requesterClearTransferRequest : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%requesterClearTransferRequest : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%requesterClearTransferRequest : @storage
                    IF_NONE
                      {
                        PUSH int 87; # int : @parameter%requesterClearTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%requesterClearTransferRequest : @storage
                    # assert svl.request == sp.sender, "4" # @some : @parameter%requesterClearTransferRequest : @storage
                    SENDER;     # @sender : @some : @parameter%requesterClearTransferRequest : @storage
                    DUP 2;      # @some : @sender : @some : @parameter%requesterClearTransferRequest : @storage
                    GET 12;     # address : @sender : @some : @parameter%requesterClearTransferRequest : @storage
                    COMPARE;    # int : @some : @parameter%requesterClearTransferRequest : @storage
                    EQ;         # bool : @some : @parameter%requesterClearTransferRequest : @storage
                    IF
                      {}
                      {
                        PUSH string "4"; # string : @some : @parameter%requesterClearTransferRequest : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%requesterClearTransferRequest : @storage
                    # svl.request = svl.owner # @some : @parameter%requesterClearTransferRequest : @storage
                    DUP;        # @some : @some : @parameter%requesterClearTransferRequest : @storage
                    GET 7;      # address : @some : @parameter%requesterClearTransferRequest : @storage
                    UPDATE 12;  # @some : @parameter%requesterClearTransferRequest : @storage
                    # svl.acceptRequest = False # @some : @parameter%requesterClearTransferRequest : @storage
                    PUSH bool False; # bool : @some : @parameter%requesterClearTransferRequest : @storage
                    UPDATE 1;   # @some : @parameter%requesterClearTransferRequest : @storage
                    # self.data.svls[svl_key] = svl # @some : @parameter%requesterClearTransferRequest : @storage
                    DIG 2;      # @storage : @some : @parameter%requesterClearTransferRequest
                    DUP;        # @storage : @storage : @some : @parameter%requesterClearTransferRequest
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @some : @parameter%requesterClearTransferRequest
                    DIG 2;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%requesterClearTransferRequest
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%requesterClearTransferRequest
                    DIG 3;      # @parameter%requesterClearTransferRequest : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE 12;  # @storage
                    NIL operation; # list operation : @storage
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == transfer ==
                    # svl = self.data.svls[svl_key] # @parameter%transfer : @storage
                    DUP 2;      # @storage : @parameter%transfer : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%transfer : @storage
                    DUP 2;      # @parameter%transfer : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%transfer : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%transfer : @storage
                    IF_NONE
                      {
                        PUSH int 106; # int : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%transfer : @storage
                    # assert sp.amount == svl.price, "1" # @some : @parameter%transfer : @storage
                    DUP;        # @some : @some : @parameter%transfer : @storage
                    GET 11;     # mutez : @some : @parameter%transfer : @storage
                    AMOUNT;     # @amount : mutez : @some : @parameter%transfer : @storage
                    COMPARE;    # int : @some : @parameter%transfer : @storage
                    EQ;         # bool : @some : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "1"; # string : @some : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%transfer : @storage
                    # assert svl.owner != sp.sender, "8" # @some : @parameter%transfer : @storage
                    SENDER;     # @sender : @some : @parameter%transfer : @storage
                    DUP 2;      # @some : @sender : @some : @parameter%transfer : @storage
                    GET 7;      # address : @sender : @some : @parameter%transfer : @storage
                    COMPARE;    # int : @some : @parameter%transfer : @storage
                    NEQ;        # bool : @some : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "8"; # string : @some : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%transfer : @storage
                    # assert svl.request == sp.sender, "4" # @some : @parameter%transfer : @storage
                    SENDER;     # @sender : @some : @parameter%transfer : @storage
                    DUP 2;      # @some : @sender : @some : @parameter%transfer : @storage
                    GET 12;     # address : @sender : @some : @parameter%transfer : @storage
                    COMPARE;    # int : @some : @parameter%transfer : @storage
                    EQ;         # bool : @some : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "4"; # string : @some : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%transfer : @storage
                    # assert svl.acceptRequest == True, "9" # @some : @parameter%transfer : @storage
                    PUSH bool True; # bool : @some : @parameter%transfer : @storage
                    DUP 2;      # @some : bool : @some : @parameter%transfer : @storage
                    CAR;        # bool : bool : @some : @parameter%transfer : @storage
                    COMPARE;    # int : @some : @parameter%transfer : @storage
                    EQ;         # bool : @some : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "9"; # string : @some : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%transfer : @storage
                    # seller_share = sp.split_tokens(sp.amount, self.data.split, 100) # @some : @parameter%transfer : @storage
                    PUSH nat 100; # nat : @some : @parameter%transfer : @storage
                    DUP 4;      # @storage : nat : @some : @parameter%transfer : @storage
                    GET 11;     # nat : nat : @some : @parameter%transfer : @storage
                    AMOUNT;     # @amount : nat : nat : @some : @parameter%transfer : @storage
                    MUL;        # mutez : nat : @some : @parameter%transfer : @storage
                    EDIV;       # option (pair mutez mutez) : @some : @parameter%transfer : @storage
                    IF_NONE
                      {
                        PUSH int 111; # int : @some : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        # seller_share = sp.split_tokens(sp.amount, self.data.split, 100) # @some : @some : @parameter%transfer : @storage
                      }; # @some : @some : @parameter%transfer : @storage
                    CAR;        # mutez : @some : @parameter%transfer : @storage
                    # if self.data.split != sp.nat(0): sp.send(sp.sender, seller_share) # mutez : @some : @parameter%transfer : @storage
                    PUSH nat 0; # nat : mutez : @some : @parameter%transfer : @storage
                    DUP 5;      # @storage : nat : mutez : @some : @parameter%transfer : @storage
                    GET 11;     # nat : nat : mutez : @some : @parameter%transfer : @storage
                    COMPARE;    # int : mutez : @some : @parameter%transfer : @storage
                    NEQ;        # bool : mutez : @some : @parameter%transfer : @storage
                    IF
                      {
                        # if self.data.split != sp.nat(0): sp.send(sp.sender, seller_share) # mutez : @some : @parameter%transfer : @storage
                        NIL operation; # list operation : mutez : @some : @parameter%transfer : @storage
                        SENDER;     # @sender : list operation : mutez : @some : @parameter%transfer : @storage
                        CONTRACT unit; # option (contract unit) : list operation : mutez : @some : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH int 112; # int : list operation : mutez : @some : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : mutez : @some : @parameter%transfer : @storage
                        DUP 3;      # mutez : @some : list operation : mutez : @some : @parameter%transfer : @storage
                        UNIT;       # unit : mutez : @some : list operation : mutez : @some : @parameter%transfer : @storage
                        TRANSFER_TOKENS; # operation : list operation : mutez : @some : @parameter%transfer : @storage
                        CONS;       # list operation : mutez : @some : @parameter%transfer : @storage
                      }
                      {
                        NIL operation; # list operation : mutez : @some : @parameter%transfer : @storage
                      }; # list operation : mutez : @some : @parameter%transfer : @storage
                    # if self.data.split != sp.nat(100): # list operation : mutez : @some : @parameter%transfer : @storage
                    PUSH nat 100; # nat : list operation : mutez : @some : @parameter%transfer : @storage
                    DUP 6;      # @storage : nat : list operation : mutez : @some : @parameter%transfer : @storage
                    GET 11;     # nat : nat : list operation : mutez : @some : @parameter%transfer : @storage
                    COMPARE;    # int : list operation : mutez : @some : @parameter%transfer : @storage
                    NEQ;        # bool : list operation : mutez : @some : @parameter%transfer : @storage
                    IF
                      {
                        SWAP;       # mutez : list operation : @some : @parameter%transfer : @storage
                        # my_fee = sp.amount - seller_share # mutez : list operation : @some : @parameter%transfer : @storage
                        AMOUNT;     # @amount : mutez : list operation : @some : @parameter%transfer : @storage
                        SUB_MUTEZ;  # option mutez : list operation : @some : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH int 114; # int : list operation : @some : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @some : @parameter%transfer : @storage
                        # my_fee_share = sp.split_tokens(my_fee, 50, 100) # @some : list operation : @some : @parameter%transfer : @storage
                        PUSH nat 100; # nat : @some : list operation : @some : @parameter%transfer : @storage
                        PUSH nat 50; # nat : nat : @some : list operation : @some : @parameter%transfer : @storage
                        DIG 2;      # @some : nat : nat : list operation : @some : @parameter%transfer : @storage
                        MUL;        # mutez : nat : list operation : @some : @parameter%transfer : @storage
                        EDIV;       # option (pair mutez mutez) : list operation : @some : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH int 115; # int : list operation : @some : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            # my_fee_share = sp.split_tokens(my_fee, 50, 100) # @some : list operation : @some : @parameter%transfer : @storage
                          }; # @some : list operation : @some : @parameter%transfer : @storage
                        CAR;        # mutez : list operation : @some : @parameter%transfer : @storage
                        SWAP;       # list operation : mutez : @some : @parameter%transfer : @storage
                        # sp.send(self.data.admin1, my_fee_share) # list operation : mutez : @some : @parameter%transfer : @storage
                        DUP 5;      # @storage : list operation : mutez : @some : @parameter%transfer : @storage
                        CAR;        # address : list operation : mutez : @some : @parameter%transfer : @storage
                        CONTRACT unit; # option (contract unit) : list operation : mutez : @some : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH int 116; # int : list operation : mutez : @some : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : mutez : @some : @parameter%transfer : @storage
                        DUP 3;      # mutez : @some : list operation : mutez : @some : @parameter%transfer : @storage
                        UNIT;       # unit : mutez : @some : list operation : mutez : @some : @parameter%transfer : @storage
                        TRANSFER_TOKENS; # operation : list operation : mutez : @some : @parameter%transfer : @storage
                        CONS;       # list operation : mutez : @some : @parameter%transfer : @storage
                        # sp.send(self.data.admin2, my_fee_share) # list operation : mutez : @some : @parameter%transfer : @storage
                        DUP 5;      # @storage : list operation : mutez : @some : @parameter%transfer : @storage
                        GET 3;      # address : list operation : mutez : @some : @parameter%transfer : @storage
                        CONTRACT unit; # option (contract unit) : list operation : mutez : @some : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH int 117; # int : list operation : mutez : @some : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : mutez : @some : @parameter%transfer : @storage
                        DIG 2;      # mutez : @some : list operation : @some : @parameter%transfer : @storage
                        UNIT;       # unit : mutez : @some : list operation : @some : @parameter%transfer : @storage
                        TRANSFER_TOKENS; # operation : list operation : @some : @parameter%transfer : @storage
                        CONS;       # list operation : @some : @parameter%transfer : @storage
                      }
                      {
                        SWAP;       # mutez : list operation : @some : @parameter%transfer : @storage
                        DROP;       # list operation : @some : @parameter%transfer : @storage
                      }; # list operation : @some : @parameter%transfer : @storage
                    # if svl.first_owner: # list operation : @some : @parameter%transfer : @storage
                    DUP 2;      # @some : list operation : @some : @parameter%transfer : @storage
                    GET 5;      # bool : list operation : @some : @parameter%transfer : @storage
                    IF
                      {
                        # svl.prev_owners_info = [(sp.now, svl.owner, svl.curr_owner_info)] # list operation : @some : @parameter%transfer : @storage
                        NIL (pair timestamp (pair address (list string))); # list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        DUP 3;      # @some : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        GET 3;      # list string : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        DUP 4;      # @some : list string : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        GET 7;      # address : list string : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        PAIR;       # pair address (list string) : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        NOW;        # @now : pair address (list string) : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        PAIR;       # pair @now (pair address (list string)) : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        CONS;       # list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        DIG 2;      # @some : list (pair timestamp (pair address (list string))) : list operation : @parameter%transfer : @storage
                        SWAP;       # list (pair timestamp (pair address (list string))) : @some : list operation : @parameter%transfer : @storage
                        UPDATE 9;   # @some : list operation : @parameter%transfer : @storage
                        # svl.first_owner = False # @some : list operation : @parameter%transfer : @storage
                        PUSH bool False; # bool : @some : list operation : @parameter%transfer : @storage
                        UPDATE 5;   # @some : list operation : @parameter%transfer : @storage
                        SWAP;       # list operation : @some : @parameter%transfer : @storage
                      }
                      {
                        # svl.prev_owners_info = sp.cons((sp.now, svl.owner, svl.curr_owner_info), svl.prev_owners_info) # list operation : @some : @parameter%transfer : @storage
                        DUP 2;      # @some : list operation : @some : @parameter%transfer : @storage
                        GET 9;      # list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        DUP 3;      # @some : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        GET 3;      # list string : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        DUP 4;      # @some : list string : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        GET 7;      # address : list string : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        PAIR;       # pair address (list string) : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        NOW;        # @now : pair address (list string) : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        PAIR;       # pair @now (pair address (list string)) : list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        CONS;       # list (pair timestamp (pair address (list string))) : list operation : @some : @parameter%transfer : @storage
                        DIG 2;      # @some : list (pair timestamp (pair address (list string))) : list operation : @parameter%transfer : @storage
                        SWAP;       # list (pair timestamp (pair address (list string))) : @some : list operation : @parameter%transfer : @storage
                        UPDATE 9;   # @some : list operation : @parameter%transfer : @storage
                        SWAP;       # list operation : @some : @parameter%transfer : @storage
                      }; # list operation : @some : @parameter%transfer : @storage
                    SWAP;       # @some : list operation : @parameter%transfer : @storage
                    # svl.curr_owner_info = [''] # @some : list operation : @parameter%transfer : @storage
                    PUSH (list string) {""}; # list string : @some : list operation : @parameter%transfer : @storage
                    UPDATE 3;   # @some : list operation : @parameter%transfer : @storage
                    # svl.acceptRequest = False # @some : list operation : @parameter%transfer : @storage
                    PUSH bool False; # bool : @some : list operation : @parameter%transfer : @storage
                    UPDATE 1;   # @some : list operation : @parameter%transfer : @storage
                    # svl.owner = svl.request # @some : list operation : @parameter%transfer : @storage
                    DUP;        # @some : @some : list operation : @parameter%transfer : @storage
                    GET 12;     # address : @some : list operation : @parameter%transfer : @storage
                    UPDATE 7;   # @some : list operation : @parameter%transfer : @storage
                    SWAP;       # list operation : @some : @parameter%transfer : @storage
                    # self.data.svls[svl_key] = svl # list operation : @some : @parameter%transfer : @storage
                    DIG 3;      # @storage : list operation : @some : @parameter%transfer
                    DUP;        # @storage : @storage : list operation : @some : @parameter%transfer
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @some : @parameter%transfer
                    DIG 3;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%transfer
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation : @parameter%transfer
                    DIG 4;      # @parameter%transfer : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : list operation
                    UPDATE 12;  # @storage : list operation
                    SWAP;       # list operation : @storage
                  }
                  {
                    # == update ==
                    # svl = self.data.svls[params.svl_key] # @parameter%update : @storage
                    DUP 2;      # @storage : @parameter%update : @storage
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%update : @storage
                    DUP 2;      # @parameter%update : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%update : @storage
                    CDR;        # string : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%update : @storage
                    GET;        # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @parameter%update : @storage
                    IF_NONE
                      {
                        PUSH int 132; # int : @parameter%update : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%update : @storage
                    # assert svl.owner == sp.sender, "3" # @some : @parameter%update : @storage
                    SENDER;     # @sender : @some : @parameter%update : @storage
                    DUP 2;      # @some : @sender : @some : @parameter%update : @storage
                    GET 7;      # address : @sender : @some : @parameter%update : @storage
                    COMPARE;    # int : @some : @parameter%update : @storage
                    EQ;         # bool : @some : @parameter%update : @storage
                    IF
                      {}
                      {
                        PUSH string "3"; # string : @some : @parameter%update : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%update : @storage
                    # assert len(params.curr_owner_info) < 100, "2" # @some : @parameter%update : @storage
                    PUSH nat 100; # nat : @some : @parameter%update : @storage
                    DUP 3;      # @parameter%update : nat : @some : @parameter%update : @storage
                    CAR;        # list string : nat : @some : @parameter%update : @storage
                    SIZE;       # nat : nat : @some : @parameter%update : @storage
                    COMPARE;    # int : @some : @parameter%update : @storage
                    LT;         # bool : @some : @parameter%update : @storage
                    IF
                      {}
                      {
                        PUSH string "2"; # string : @some : @parameter%update : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%update : @storage
                    # if not svl.first_owner: # @some : @parameter%update : @storage
                    DUP;        # @some : @some : @parameter%update : @storage
                    GET 5;      # bool : @some : @parameter%update : @storage
                    IF
                      {}
                      {
                        # totalCids = len(params.curr_owner_info) # @some : @parameter%update : @storage
                        DUP 2;      # @parameter%update : @some : @parameter%update : @storage
                        CAR;        # list string : @some : @parameter%update : @storage
                        SIZE;       # nat : @some : @parameter%update : @storage
                        # for tuple in svl.prev_owners_info: # nat : @some : @parameter%update : @storage
                        DUP 2;      # @some : nat : @some : @parameter%update : @storage
                        GET 9;      # list (pair timestamp (pair address (list string))) : nat : @some : @parameter%update : @storage
                        ITER
                          {
                            # (a, b, c) = tuple # pair timestamp (pair address (list string)) : nat : @some : @parameter%update : @storage
                            GET 4;      # list string : nat : @some : @parameter%update : @storage
                            # totalCids += len(c) # list string : nat : @some : @parameter%update : @storage
                            SIZE;       # nat : nat : @some : @parameter%update : @storage
                            ADD;        # nat : @some : @parameter%update : @storage
                            # assert totalCids < 100, "2" # nat : @some : @parameter%update : @storage
                            PUSH nat 100; # nat : nat : @some : @parameter%update : @storage
                            DUP 2;      # nat : nat : nat : @some : @parameter%update : @storage
                            COMPARE;    # int : nat : @some : @parameter%update : @storage
                            LT;         # bool : nat : @some : @parameter%update : @storage
                            IF
                              {}
                              {
                                PUSH string "2"; # string : nat : @some : @parameter%update : @storage
                                FAILWITH;   # FAILED
                              }; # nat : @some : @parameter%update : @storage
                          }; # nat : @some : @parameter%update : @storage
                        DROP;       # @some : @parameter%update : @storage
                      }; # @some : @parameter%update : @storage
                    # svl.curr_owner_info = params.curr_owner_info # @some : @parameter%update : @storage
                    DUP 2;      # @parameter%update : @some : @parameter%update : @storage
                    CAR;        # list string : @some : @parameter%update : @storage
                    UPDATE 3;   # @some : @parameter%update : @storage
                    # self.data.svls[params.svl_key] = svl # @some : @parameter%update : @storage
                    DIG 2;      # @storage : @some : @parameter%update
                    DUP;        # @storage : @storage : @some : @parameter%update
                    GET 12;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @some : @parameter%update
                    DIG 2;      # @some : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%update
                    SOME;       # option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage : @parameter%update
                    DIG 3;      # @parameter%update : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    CDR;        # string : option (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE;     # big_map string (pair (bool %acceptRequest) (pair (list %curr_owner_info string) (pair (bool %first_owner) (pair (address %owner) (pair (list %prev_owners_info (pair timestamp (pair address (list string)))) (pair (mutez %price) (address %request))))))) : @storage
                    UPDATE 12;  # @storage
                    NIL operation; # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : @storage
      }; # list operation : @storage
    NIL operation; # list operation : list operation : @storage
    SWAP;       # list operation : list operation : @storage
    ITER
      {
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };